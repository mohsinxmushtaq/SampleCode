@model LabelTool.ReceiptScanner.ViewModels.LabelProjectEditorViewModel

<div class="row row-full" id="app">
    <div class="col-lg-2 col-box">
        <RecycleScroller class="scroller"
                         :items="list"
                         :item-size="200"
                         key-field="imageName"
                         v-slot="{ item }">
            <div :id="item.imagePath" class="asset-item" v-on:click="select($event)">
                <img v-bind:src="'/media/' + item.imagePath" class="img-thumbnail" />
            </div>

        </RecycleScroller>

    </div>
    <div class="col-lg-8 col-box">
        <div id="map" class="map"></div>
    </div>
    <div class="col-lg-2 col-box">
        <div class="d-flex flex-row justify-content-between">
            <div>
                Tags
            </div>
            <div>
                <svg v-on:click="add()" width="1.8em" height="1.8em" viewBox="0 0 16 16" class="bi bi-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                </svg>
            </div>
        </div>
        <div id="row">
            <div class="form-inline" v-for="(tag,k) in tags" :key="k">
                <div class="form-group">
                    <input type="text" class="form-control" v-model="tag.name" v-on:blur="addTagToList()">
                </div>
                <div class="form-group">
                    <span>
                        <svg v-on:click="remove(k)" v-show="k || ( !k && tags.length > 0)" width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </span>
                </div>
            </div>        
         </div>
    </div>

</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/css/ol.css" type="text/css">
<style>
    .map {
        height: 100%;
        width: 100%;
    }
</style>
<script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/build/ol.js"></script>
<style>
    svg{
        cursor:pointer;
    }
    .row-full{
        height:100vh;
    }
    .col-box {
        background-color: #EDEDED;
        border: 2px solid #fff;
    }

    .img-thumbnail {
        width: 100px;
        object-fit: contain;
    }


    .scroller {
        height: 100%;
    }

    .asset-item {
        cursor: pointer;
        align-items: center;
        justify-content: center;
        display: flex;
        flex-direction: column;
    }

        .asset-item:hover {
            background: rgba(0, 0, 0, 0.4);
        }
</style>
<link rel="stylesheet" href="~/css/vue-virtual-scroller.css" />

<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="~/js/vue-virtual-scroller.min.js"></script>
<script>
    var url = "@Url.Action("GetImages", "Projects", new { area = "LabelTool.ReceiptScanner" })";
    var urlGetOcrFile = "@Url.Action("GetImageOcr", "Projects", new { area = "LabelTool.ReceiptScanner" })";
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const projectId = urlParams.get("id");
    const fr = new FileReader();
    Vue.component("recyclescroller", VueVirtualScroller.RecycleScroller);
    var app = new Vue({
        el: "#app",
        data() {
            return {
                list: [],
                currentOcr: null,
                imageWidth: 0,
                imageHeight: 0,
                imageExtent: [],
                imageUri: null,
                imageAngle: 0,
                projection: null,
                imgSource: null,
                mapView: null,
                map: null,
                currentImagePath: null,
                regionOrders: [],
                regionOrderById: [],
                textVectorLayer: null,
                imageLayer: null,
                selectedRegionIds: [],
                currentAssetRegions: [],
                tags: [],
                selectedTag: null,
            };
        },
        mounted() {
            axios.get(url, { params: { id: projectId } }).then(response => {
                this.list = response.data;
            });
        },
        methods: {
            //Image Map related methods
            async select(event) {
                var targetId = event.currentTarget.id;
                this.currentImagePath = targetId;
                if (this.map && this.currentImagePath != targetId) {
                    return;
                }
                const canvas = await this.loadImageToCanvas("/Media/" + targetId);
                this.imageUri = canvas.toDataURL("image/jpeg", 0.2);

                this.getOcrJson(targetId).then(result => {
                    this.currentOcr = result;
                    this.setImage();
                    this.buildRegionOrders();
                    this.drawOcr();
                }).catch(err => this.currentOcr = null)
                
            },
            getOcrJson(targetId) {
                return $.getJSON("/Media/" + targetId + ".ocr.json");
            },
            setImage: function () {
                this.imageWidth = this.currentOcr.analyzeResult.readResults[0].width;
                this.imageHeight = this.currentOcr.analyzeResult.readResults[0].height;
                this.imageAngle = this.currentOcr.analyzeResult.readResults[0].angle;
                this.imageExtent = [0, 0, this.imageWidth, this.imageHeight];
                this.projection = this.createProjection(this.imageExtent);
                this.imgSource = this.createImageSource(this.imageUri, this.projection, this.imageExtent);
                this.mapView = this.createMapView(this.projection, this.imageExtent);
                const layers = this.initializeEditorLayers(this.projection);
                this.initializeMap(this.projection, layers);

                this.map.on("pointerdown", this.handlePointerDown);
                //this.map = new ol.Map({
                //    target: 'map',
                //    layers: [
                //        new ol.layer.Image({
                //            source: this.imgSource
                //        })
                //    ],
                //    view: this.mapView
                //});
                
            },
            createProjection(imageExtend) {
                return new ol.proj.Projection({
                    code: "xkcd-image",
                    units: "pixels",
                    extent: imageExtend
                });
            },
            createImageSource(imageUri, projection, imageExtend) {
                return new ol.source.ImageStatic({
                    url: imageUri,
                    projection,
                    imageExtent: imageExtend
                });
            },
            async loadImageToCanvas(imageUrl) {
                return new Promise((resolve, reject) => {
                    const img = document.createElement("img");
                    img.onload = async () => {
                        const rotatedImage = this.renderRotatedImageToCanvas(img, 0);
                        resolve(rotatedImage);
                    };
                    img.crossOrigin = "anonymous";
                    img.onerror = reject;
                    img.src = imageUrl;
                });
            },
            createMapView(projection, imageExtend) {
                const minZoom = 0.9188632372745944;
                const rotation = (this.imageAngle)
                    ? this.degreeToRadians((this.imageAngle + 360) % 360)
                    : 0;

                return new ol.View({
                    projection,
                    center: ol.extent.getCenter(imageExtend),
                    rotation,
                    zoom: minZoom,
                    minZoom,
                });
            },
            degreeToRadians(degree, number) {
                return degree * Math.PI * 2 / 360;
            },
            getMinimumZoom() {
                const containerAspectRatio = (this.mapElement) ? (this.mapElement.clientHeight / this.mapElement.clientWidth) : 1;
                const imageAspectRatio = this.imageHeight / this.imageWidth;
                if (imageAspectRatio > containerAspectRatio) {
                    // Fit to width
                    return Math.LOG2E * Math.log(this.mapElement.clientHeight / 256);
                }
                else {
                    // Fit to height
                    return Math.LOG2E * Math.log(this.mapElement.clientWidth / 256);
                }
            },
            buildRegionOrders () {
                const ocrs = this.currentOcr;
                const ocrReadResults = (ocrs.recognitionResults || (ocrs.analyzeResult && ocrs.analyzeResult.readResults));
                const imageExtent = this.imageExtent;
                ocrReadResults.forEach((ocr) => {
                    const ocrExtent = [0, 0, ocr.width, ocr.height];
                    const pageIndex = ocr.page - 1;
                    this.regionOrders[pageIndex] = {};
                    this.regionOrderById[pageIndex] = [];
                    let order = 0;
                    if (ocr.lines) {
                        ocr.lines.forEach((line) => {
                            if (line.words) {
                                line.words.forEach((word) => {
                                    if (this.shouldDisplayOcrWord(word.text)) {
                                        const feature = this.createBoundingBoxVectorFeature(word.text, word.boundingBox, imageExtent, ocrExtent, ocr.page);
                                        this.regionOrders[pageIndex][feature.getId()] = order++;
                                        this.regionOrderById[pageIndex].push(feature.getId());
                                    }
                                });
                            }
                        });
                    }
                    
                });
            },
            shouldDisplayOcrWord(text) {
                const regex = new RegExp(/^[_]+$/);
                return !text.match(regex);
            },
            createBoundingBoxVectorFeature (text, boundingBox, imageExtent, ocrExtent, page) {
                const coordinates = [];
                const polygonPoints = [];
                const imageWidth = imageExtent[2] - imageExtent[0];
                const imageHeight = imageExtent[3] - imageExtent[1];
                const ocrWidth = ocrExtent[2] - ocrExtent[0];
                const ocrHeight = ocrExtent[3] - ocrExtent[1];
                for (let i = 0; i < boundingBox.length; i += 2) {
                    // An array of numbers representing an extent: [minx, miny, maxx, maxy]
                    coordinates.push([
                        Math.round((boundingBox[i] / ocrWidth) * imageWidth),
                        Math.round((1 - (boundingBox[i + 1] / ocrHeight)) * imageHeight),
                    ]);
                    polygonPoints.push(boundingBox[i] / ocrWidth);
                    polygonPoints.push(boundingBox[i + 1] / ocrHeight);
                }
                const featureId = this.createRegionIdFromBoundingBox(polygonPoints, page);
                const feature = new ol.Feature({
                    geometry: new ol.geom.Polygon([coordinates]),
                });
                feature.setProperties({
                    id: featureId,
                    text,
                    boundingbox: boundingBox,
                    highlighted: false,
                    isOcrProposal: true,
                });
                feature.setId(featureId);
                return feature;
            },
            createRegionIdFromBoundingBox (boundingBox, page) {
                return boundingBox.join(",") + ":" + page;
            },
            drawOcr () {
                const textFeatures = [];
                var ocrReadResults = this.currentOcr.analyzeResult.readResults[0];
                const imageExtent = this.imageExtent;
                if (ocrReadResults) {
                    const ocrExtent = [0, 0, ocrReadResults.width, ocrReadResults.height];
                    if (ocrReadResults.lines) {
                        ocrReadResults.lines.forEach((line) => {
                            if (line.words) {
                                line.words.forEach((word) => {
                                    if (this.shouldDisplayOcrWord(word.text)) {
                                        textFeatures.push(this.createBoundingBoxVectorFeature(word.text, word.boundingBox, imageExtent, ocrExtent, ocrReadResults.page));
                                    }
                                });
                            }
                        });
                    }
                    if (textFeatures.length > 0) {
                        this.addFeatures(textFeatures);
                    }
                }
            },
            addFeatures(features) {
                this.textVectorLayer.getSource().addFeatures(features);
            },
            initializeEditorLayers (projection) {
                this.initializeImageLayer(projection);
                this.initializeTextLayer();
                //this.initializeTableLayers();
                //this.initializeCheckboxLayers();
                //this.initializeLabelLayer();
                //this.initializeDrawnRegionLabelLayer();
                //this.initializeDrawnRegionLayer();
                return [this.imageLayer, this.textVectorLayer
                    //this.tableBorderVectorLayer, this.tableIconBorderVectorLayer,
                    //this.tableIconVectorLayer, this.checkboxVectorLayer, this.drawRegionVectorLayer, this.labelVectorLayer,
                    //this.drawnLabelVectorLayer
                ];
            },
            initializeTextLayer (){
                const textOptions = {};
                textOptions.name = 'TEXT_VECTOR_LAYER_NAME';
                textOptions.style = this.featureStyler;
                textOptions.source = new ol.source.Vector();
                this.textVectorLayer = new ol.layer.Vector(textOptions);
            },
            initializeImageLayer (projection) {
                this.imageLayer = new ol.layer.Image({
                    source: this.createImageSource(this.imageUri, projection, this.imageExtent),
                    name: 'IMAGE_LAYER_NAME',
                });
            },
            initializeMap (projection, layers) {
                this.map = new ol.Map({
                    target: "map",
                    interactions: ol.interaction.defaults({
                        doubleClickZoom: false,
                    }),
                    layers,
                    view: this.createMapView(projection, this.imageExtent),
                });
            },
            featureStyler(features) {
                const regionId = features.get("id");
                // Selected
                if (this.isRegionSelected(regionId)) {
                    console.log("style: " + regionId)
                    return new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            color: "#6eff40",
                            width: 1,
                        }),
                        fill: new ol.style.Fill({
                            color: "rgba(110, 255, 80, 0.4)",
                        }),
                    });
                }
                else {
                    // Unselected
                    return new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            color: "#fffc7f",
                            width: 1,
                        }),
                        fill: new ol.style.Fill({
                            color: "rgba(255, 252, 127, 0.2)",
                        }),
                    });
                }
            },
            isRegionSelected (regionId) {
                return this.getIndexOfSelectedRegionIndex(regionId) !== -1;
            },
            getIndexOfSelectedRegionIndex (regionId)  {
                return this.selectedRegionIds.findIndex((id) => id === regionId);
            },
            renderRotatedImageToCanvas(image, orientation) {
                const width = image.width;
                const height = image.height;
                const canvas = document.createElement("canvas");
                canvas.width = width;
                canvas.height = height;
                if (orientation > 4) {
                    canvas.width = height;
                    canvas.height = width;
                }
                const ctx = canvas.getContext("2d");
                switch (orientation) {
                    case 2:
                        // horizontal flip
                        ctx.translate(width, 0);
                        ctx.scale(-1, 1);
                        break;
                    case 3:
                        // 180° rotate left
                        ctx.translate(width, height);
                        ctx.rotate(Math.PI);
                        break;
                    case 4:
                        // vertical flip
                        ctx.translate(0, height);
                        ctx.scale(1, -1);
                        break;
                    case 5:
                        // vertical flip + 90 rotate right
                        ctx.rotate(0.5 * Math.PI);
                        ctx.scale(1, -1);
                        break;
                    case 6:
                        // 90° rotate right
                        ctx.rotate(0.5 * Math.PI);
                        ctx.translate(0, -height);
                        break;
                    case 7:
                        // horizontal flip + 90 rotate right
                        ctx.rotate(0.5 * Math.PI);
                        ctx.translate(width, -height);
                        ctx.scale(-1, 1);
                        break;
                    case 8:
                        // 90° rotate left
                        ctx.rotate(-0.5 * Math.PI);
                        ctx.translate(-width, 0);
                        break;
                }
                ctx.drawImage(image, 0, 0, width, height);
                return canvas;
            },
            getSelectedRegions () {
                return this.selectedRegionIds.filter((r) => this.selectedRegionIds.find((id) => r.id === id));
            },
            handlePointerDown(event) {
                const eventPixel = this.map.getEventPixel(event.originalEvent);
                const filter = this.getLayerFilterAtPixel(eventPixel);

                if (filter) {
                    
                   this.map.forEachFeatureAtPixel(
                        eventPixel,
                        (feature) => {
                           this.handleFeatureSelect(feature, true, filter.category);
                        },
                        filter.layerfilter,
                    );
                }
               
            },
            addInteraction (interaction) {
                if (undefined === this.map.getInteractions().array_.find((existingInteraction) => {
                    return interaction.constructor === existingInteraction.constructor;
                })) {
                    this.map.addInteraction(interaction);
                }
            },
            setDragPanInteraction (dragPanEnabled) {
                if (dragPanEnabled) {
                    this.addInteraction(this.dragPan);
                    this.setSwiping(false);
                }
                else {
                    this.removeInteraction(this.dragPan);
                    this.setSwiping(true);
                }
            },
            handleFeatureSelect(feature, isToggle = true, category) {
                const regionId = feature.get("id");
               
                if (isToggle && this.isRegionSelected(regionId)) {
                    this.removeFromSelectedRegions(regionId);
                    //this.imageMap.setSwiping(false);
                }
                else {
                    const polygon = regionId.split(",").map(parseFloat);
                    this.addToSelectedRegions(regionId, feature.get("text"), polygon, category);
                }
                this.redrawFeatures(this.getAllFeatures());
            },
            getLayerFilterAtPixel(eventPixel) {
                //const isPointerOnLabelledFeature = this.map.hasFeatureAtPixel(eventPixel, this.labelVectorLayerFilter);
                //if (isPointerOnLabelledFeature) {
                //    return {
                //        layerfilter: this.labelVectorLayerFilter,
                //        category: FeatureCategory.Label,
                //    };
                //}
                
                const isPointerOnTextFeature = this.map.hasFeatureAtPixel(eventPixel, this.textVectorLayer);
                if (isPointerOnTextFeature) {
                    return {
                        layerfilter: this.textVectorLayer,
                        category: 'text',
                    };
                }
                
               
                return null;
            },
            isRegionSelected (regionId) {
                return this.getIndexOfSelectedRegionIndex(regionId) !== -1;
            },
            getIndexOfSelectedRegionIndex (regionId) {
                return this.selectedRegionIds.findIndex((id) => id === regionId);
            },
            removeFromSelectedRegions(regionId) {
                console.log(regionId)
                const iRegionId = this.getIndexOfSelectedRegionIndex(regionId);
                if (iRegionId >= 0) {
                    const region = this.getSelectedRegions().find((r) => r.id === regionId);
                    if (region && region.tags && region.tags.length === 0) {
                        this.onRegionDelete(regionId);
                    }
                    this.selectedRegionIds.splice(iRegionId, 1);
                    //if (this.props.onSelectedRegionsChanged) {
                    //    this.props.onSelectedRegionsChanged(this.getSelectedRegions());
                    //}
                }
            },
            addToSelectedRegions (regionId, text, polygon, regionCategory) {
                let selectedRegion;
                if (this.isRegionSelected(regionId)) {
                    // skip if it's already existed in selected regions
                    return;
                }
                else if (this.getIndexOfCurrentRegions(regionId) !== -1) {
                    selectedRegion = this.selectedRegionIds.find((region) => region.id === regionId);
                    // Explicitly set pageNumber in order to fix incorrect page number
                    //selectedRegion.pageNumber = this.state.currentPage;
                }
                else if (regionCategory === 'label') {
                    if (this.selectedRegionIds.includes(regionId)) {
                        return;
                    }
                }
                else {
                    const regionBoundingBox = this.convertToRegionBoundingBox(polygon);
                    const regionPoints = this.convertToRegionPoints(polygon);
                    selectedRegion = {
                        id: regionId,
                        type: 'POLYGON',
                        category: regionCategory,
                        tags: [],
                        boundingBox: regionBoundingBox,
                        points: regionPoints,
                        value: text,
                        pageNumber: 1,
                    };
                    this.addRegions([selectedRegion]);
                    
                }
                this.selectedRegionIds.push(regionId);
                //this.onRegionSelected(regionId, false);
            },
            getIndexOfCurrentRegions (regionId) {
                return this.selectedRegionIds.findIndex((region) => region.id === regionId);
            },
            convertToRegionBoundingBox (polygon) {
                const xAxisValues = polygon.filter((value, index) => index % 2 === 0);
                const yAxisValues = polygon.filter((value, index) => index % 2 === 1);
                const left = Math.min(...xAxisValues);
                const top = Math.min(...yAxisValues);
                const right = Math.max(...xAxisValues);
                const bottom = Math.max(...yAxisValues);
                return {
                    height: bottom - top,
                    width: right - left,
                    left,
                    top,
                };
            },
            convertToRegionPoints (polygon) {
                const points = [];
                for (let i = 0; i < polygon.length; i += 2) {
                    points.push({ x: polygon[i], y: polygon[i + 1] });
                }
                return points;
            },
            addRegions (regions) {
                //this.addRegionsToAsset(regions);
                this.addRegionsToImageMap(regions.filter((region) => region.pageNumber === 1));
            },
            addRegionsToAsset (regions)  {
                const regionsToBeKept = this.currentAssetRegions.filter((assetRegion) => {
                    return regions.findIndex((r) => r.id === assetRegion.id) === -1;
                });
                this.updateAssetRegions(regionsToBeKept.concat(regions));
            },
            addRegionsToImageMap(regions) {
                this.redrawFeatures(this.getAllFeatures());
                if (!this.imageMap) {
                    return;
                }
                const textRegions = regions.filter((r) => r.category === 'text');
                const imageExtent = this.imageMap.getImageExtent();
                if (textRegions.length > 0) {

                    const allTextFeatures = this.imageMap.getAllFeatures();
                    const regionsNotInFeatures = textRegions.filter((region) => allTextFeatures.findIndex((feature) => feature.get("id") === region.id) === -1);
                    const featuresToAdd = regionsNotInFeatures.map((region) => this.convertRegionToFeature(region, imageExtent));
                    this.imageMap.addFeatures(featuresToAdd);
                }
            },
            onRegionSelected (id, multiSelect) {
                const selectedRegions = this.getSelectedRegions();
                if (this.props.onSelectedRegionsChanged) {
                    this.props.onSelectedRegionsChanged(selectedRegions);
                }
            },
            redrawFeatures(features)  {
                features.forEach((feature) => feature.changed());
            },
            createRegion(boundingBox, text, tagName, pageNumber, labelType) {
                const xAxisValues = boundingBox.filter((value, index) => index % 2 === 0);
                const yAxisValues = boundingBox.filter((value, index) => index % 2 === 1);
                const left = Math.min(...xAxisValues);
                const top = Math.min(...yAxisValues);
                const right = Math.max(...xAxisValues);
                const bottom = Math.max(...yAxisValues);
                const points = [];
                for (let i = 0; i < boundingBox.length; i += 2) {
                    points.push({
                        x: boundingBox[i],
                        y: boundingBox[i + 1],
                    });
                }
                const tag = this.props.project.tags.find((tag) => tag.name === tagName);
                let regionCategory;
                if (labelType) {
                    regionCategory = labelType;
                }
                else if (tag && tag.type === FieldType.SelectionMark) {
                    regionCategory = FeatureCategory.Checkbox;
                }
                else {
                    regionCategory = FeatureCategory.Text;
                }
                const newRegion = {
                    id: this.createRegionIdFromBoundingBox(boundingBox, pageNumber),
                    type: RegionType.Polygon,
                    category: regionCategory,
                    tags: [tagName],
                    boundingBox: {
                        height: bottom - top,
                        width: right - left,
                        left,
                        top,
                    },
                    points,
                    value: text,
                    pageNumber,
                };
                return newRegion;
            },
            applyTag  (tag) {
                const selectedRegions = this.getSelectedRegions();
                const regionsEmpty = !selectedRegions || !selectedRegions.length;
                if (!tag || regionsEmpty) {
                    return;
                }
                if (this.showMultiPageFieldWarningIfNecessary(tag, selectedRegions)) {
                    return;
                }
                const transformer = CanvasHelpers.setSingleTag;
                const inputTag = this.props.project.tags.filter((t) => t.name === tag);
                for (const selectedRegion of selectedRegions) {
                    selectedRegion.tags = transformer(selectedRegion.tags, tag);
                }
                this.updateRegions(selectedRegions);
                this.selectedRegionIds = [];
                if (this.props.onSelectedRegionsChanged) {
                    this.props.onSelectedRegionsChanged([]);
                }
                if (selectedRegions.length === 1 && selectedRegions[0].category === FeatureCategory.Checkbox) {
                    this.setTagType(inputTag[0], FieldType.SelectionMark);
                }
                else if (selectedRegions[0].category === FeatureCategory.DrawnRegion) {
                    selectedRegions.forEach((selectedRegion) => {
                        this.imageMap.removeDrawnRegionFeature(this.imageMap.getDrawnRegionFeatureByID(selectedRegion.id));
                    });
                }
                this.redrawAllFeatures();
                this.applyTagFlag = true;
            },
            getAllFeatures () {
                return this.textVectorLayer.getSource().getFeatures();
            },
            onTagClicked  (tag)  {
                this.selectedTag = tag.name
                this.applyTag(tag.name);
            },

            //Tag related methods
            add() {
                console.log("test")
                this.tags.push({
                    name: '',
                })
                console.log(this.tags)
            },
            remove(index) {
                this.tags.splice(index, 1);
            },
            addTagToList() {
                console.log(this.tags)
            }
        }
    });
</script>

